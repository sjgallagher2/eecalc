// Generated by Bisonc++ V4.13.01 on Fri, 28 Oct 2016 12:10:09 -0400

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {258, 1}, // 1: startrule ->  tokenshow
     {258, 2}, // 2: startrule ->  startrule tokenshow
     {259, 1}, // 3: tokenshow ->  token
     {260, 1}, // 4: token (NUMBER) ->  NUMBER
     {260, 2}, // 5: token ('j') ->  'j' token
     {260, 3}, // 6: token ('^') ->  token '^' token
     {260, 2}, // 7: token ('-') ->  '-' token
     {260, 3}, // 8: token ('+') ->  token '+' token
     {260, 3}, // 9: token ('-') ->  token '-' token
     {260, 3}, // 10: token ('*') ->  token '*' token
     {260, 3}, // 11: token ('/') ->  token '/' token
     {260, 4}, // 12: token ('|') ->  token '|' '|' token
     {260, 3}, // 13: token ('[') ->  '[' token ']'
     {260, 3}, // 14: token ('(') ->  '(' token ')'
     {260, 2}, // 15: token ('M') ->  token 'M'
     {260, 2}, // 16: token ('k') ->  token 'k'
     {260, 2}, // 17: token ('m') ->  token 'm'
     {260, 2}, // 18: token ('u') ->  token 'u'
     {260, 2}, // 19: token ('n') ->  token 'n'
     {260, 2}, // 20: token ('p') ->  token 'p'
     {260, 7}, // 21: token ('s') ->  's' 'q' 'r' 't' '(' token ')'
     {260, 5}, // 22: token ('l') ->  'l' 'n' '(' token ')'
     {260, 6}, // 23: token ('m') ->  'm' 'a' 'g' '(' token ')'
     {260, 8}, // 24: token ('p') ->  'p' 'h' 'a' 's' 'e' '(' token ')'
     {260, 7}, // 25: token ('c') ->  'c' 'o' 'n' 'j' '(' token ')'
     {260, 7}, // 26: token ('f') ->  'f' 't' 'o' 'w' '(' token ')'
     {260, 7}, // 27: token ('f') ->  'f' 't' 'o' 't' '(' token ')'
     {260, 6}, // 28: token ('d') ->  'd' 'e' 'g' '(' token ')'
     {260, 7}, // 29: token ('f') ->  'f' 'c' '(' token ',' token ')'
     {260, 7}, // 30: token ('L') ->  'L' 'C' '(' token ',' token ')'
     {260, 7}, // 31: token ('X') ->  'X' 'c' '(' token ',' token ')'
     {260, 6}, // 32: token ('s') ->  's' 'i' 'n' '(' token ')'
     {260, 6}, // 33: token ('c') ->  'c' 'o' 's' '(' token ')'
     {260, 6}, // 34: token ('t') ->  't' 'a' 'n' '(' token ')'
     {260, 7}, // 35: token ('a') ->  'a' 's' 'i' 'n' '(' token ')'
     {260, 7}, // 36: token ('a') ->  'a' 'c' 'o' 's' '(' token ')'
     {260, 7}, // 37: token ('a') ->  'a' 't' 'a' 'n' '(' token ')'
     {260, 7}, // 38: token ('s') ->  's' 'i' 'n' 'h' '(' token ')'
     {260, 1}, // 39: token ('e') ->  'e'
     {260, 2}, // 40: token ('p') ->  'p' 'i'
     {261, 1}, // 41: startrule_$ ->  startrule
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 21} },             
    { {       258}, {  1} }, // startrule
    { {       259}, {  2} }, // tokenshow
    { {       260}, {  3} }, // token    
    { {       257}, {  4} }, // NUMBER   
    { {       106}, {  5} }, // 'j'      
    { {        45}, {  6} }, // '-'      
    { {        91}, {  7} }, // '['      
    { {        40}, {  8} }, // '('      
    { {       115}, {  9} }, // 's'      
    { {       108}, { 10} }, // 'l'      
    { {       109}, { 11} }, // 'm'      
    { {       112}, { 12} }, // 'p'      
    { {        99}, { 13} }, // 'c'      
    { {       102}, { 14} }, // 'f'      
    { {       100}, { 15} }, // 'd'      
    { {        76}, { 16} }, // 'L'      
    { {        88}, { 17} }, // 'X'      
    { {       116}, { 18} }, // 't'      
    { {        97}, { 19} }, // 'a'      
    { {       101}, { 20} }, // 'e'      
    { {         0}, {  0} },             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           21} },             
    { {       259}, {           21} }, // tokenshow
    { {       260}, {            3} }, // token    
    { {       257}, {            4} }, // NUMBER   
    { {       106}, {            5} }, // 'j'      
    { {        45}, {            6} }, // '-'      
    { {        91}, {            7} }, // '['      
    { {        40}, {            8} }, // '('      
    { {       115}, {            9} }, // 's'      
    { {       108}, {           10} }, // 'l'      
    { {       109}, {           11} }, // 'm'      
    { {       112}, {           12} }, // 'p'      
    { {        99}, {           13} }, // 'c'      
    { {       102}, {           14} }, // 'f'      
    { {       100}, {           15} }, // 'd'      
    { {        76}, {           16} }, // 'L'      
    { {        88}, {           17} }, // 'X'      
    { {       116}, {           18} }, // 't'      
    { {        97}, {           19} }, // 'a'      
    { {       101}, {           20} }, // 'e'      
    { {     _EOF_}, { PARSE_ACCEPT} },             
    { {         0}, {            0} },             
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, { 13} },       
    { {      94}, { 22} }, // '^'
    { {      43}, { 23} }, // '+'
    { {      45}, { 24} }, // '-'
    { {      42}, { 25} }, // '*'
    { {      47}, { 26} }, // '/'
    { {     124}, { 27} }, // '|'
    { {      77}, { 28} }, // 'M'
    { {     107}, { 29} }, // 'k'
    { {     109}, { 30} }, // 'm'
    { {     117}, { 31} }, // 'u'
    { {     110}, { 32} }, // 'n'
    { {     112}, { 33} }, // 'p'
    { {       0}, { -3} },       
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 34} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 35} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 36} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 37} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       113}, { 38} }, // 'q'
    { {       105}, { 39} }, // 'i'
    { {         0}, {  0} },       
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       110}, { 40} }, // 'n'
    { {         0}, {  0} },       
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        97}, { 41} }, // 'a'
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       104}, { 42} }, // 'h'
    { {       105}, { 43} }, // 'i'
    { {         0}, {  0} },       
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       111}, { 44} }, // 'o'
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       116}, { 45} }, // 't'
    { {        99}, { 46} }, // 'c'
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       101}, { 47} }, // 'e'
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        67}, { 48} }, // 'C'
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        99}, { 49} }, // 'c'
    { {         0}, {  0} },       
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        97}, { 50} }, // 'a'
    { {         0}, {  0} },       
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {       115}, { 51} }, // 's'
    { {        99}, { 52} }, // 'c'
    { {       116}, { 53} }, // 't'
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 54} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 55} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 56} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 57} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 58} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       124}, { 59} }, // '|'
    { {         0}, {  0} },       
};

SR__ s_28[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_34[] =
{
    { { REQ_DEF}, { 13} },       
    { {      94}, { 22} }, // '^'
    { {      43}, { 23} }, // '+'
    { {      45}, { 24} }, // '-'
    { {      42}, { 25} }, // '*'
    { {      47}, { 26} }, // '/'
    { {     124}, { 27} }, // '|'
    { {      77}, { 28} }, // 'M'
    { {     107}, { 29} }, // 'k'
    { {     109}, { 30} }, // 'm'
    { {     117}, { 31} }, // 'u'
    { {     110}, { 32} }, // 'n'
    { {     112}, { 33} }, // 'p'
    { {       0}, { -5} },       
};

SR__ s_35[] =
{
    { { REQ_DEF}, {  4} },       
    { {      94}, { 22} }, // '^'
    { {      42}, { 25} }, // '*'
    { {      47}, { 26} }, // '/'
    { {       0}, { -7} },       
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        93}, { 60} }, // ']'
    { {        94}, { 22} }, // '^'
    { {        43}, { 23} }, // '+'
    { {        45}, { 24} }, // '-'
    { {        42}, { 25} }, // '*'
    { {        47}, { 26} }, // '/'
    { {       124}, { 27} }, // '|'
    { {        77}, { 28} }, // 'M'
    { {       107}, { 29} }, // 'k'
    { {       109}, { 30} }, // 'm'
    { {       117}, { 31} }, // 'u'
    { {       110}, { 32} }, // 'n'
    { {       112}, { 33} }, // 'p'
    { {         0}, {  0} },       
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, { 14} },       
    { {        41}, { 61} }, // ')'
    { {        94}, { 22} }, // '^'
    { {        43}, { 23} }, // '+'
    { {        45}, { 24} }, // '-'
    { {        42}, { 25} }, // '*'
    { {        47}, { 26} }, // '/'
    { {       124}, { 27} }, // '|'
    { {        77}, { 28} }, // 'M'
    { {       107}, { 29} }, // 'k'
    { {       109}, { 30} }, // 'm'
    { {       117}, { 31} }, // 'u'
    { {       110}, { 32} }, // 'n'
    { {       112}, { 33} }, // 'p'
    { {         0}, {  0} },       
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       114}, { 62} }, // 'r'
    { {         0}, {  0} },       
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       110}, { 63} }, // 'n'
    { {         0}, {  0} },       
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 64} }, // '('
    { {         0}, {  0} },       
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       103}, { 65} }, // 'g'
    { {         0}, {  0} },       
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        97}, { 66} }, // 'a'
    { {         0}, {  0} },       
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       110}, { 67} }, // 'n'
    { {       115}, { 68} }, // 's'
    { {         0}, {  0} },       
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       111}, { 69} }, // 'o'
    { {         0}, {  0} },       
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 70} }, // '('
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       103}, { 71} }, // 'g'
    { {         0}, {  0} },       
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 72} }, // '('
    { {         0}, {  0} },       
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 73} }, // '('
    { {         0}, {  0} },       
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       110}, { 74} }, // 'n'
    { {         0}, {  0} },       
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       105}, { 75} }, // 'i'
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       111}, { 76} }, // 'o'
    { {         0}, {  0} },       
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        97}, { 77} }, // 'a'
    { {         0}, {  0} },       
};

SR__ s_54[] =
{
    { { REQ_DEF}, {  2} },       
    { {      94}, { 22} }, // '^'
    { {       0}, { -6} },       
};

SR__ s_55[] =
{
    { { REQ_DEF}, {  4} },       
    { {      94}, { 22} }, // '^'
    { {      42}, { 25} }, // '*'
    { {      47}, { 26} }, // '/'
    { {       0}, { -8} },       
};

SR__ s_56[] =
{
    { { REQ_DEF}, {  4} },       
    { {      94}, { 22} }, // '^'
    { {      42}, { 25} }, // '*'
    { {      47}, { 26} }, // '/'
    { {       0}, { -9} },       
};

SR__ s_57[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  22} }, // '^'
    { {       0}, { -10} },       
};

SR__ s_58[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  22} }, // '^'
    { {       0}, { -11} },       
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 78} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       116}, { 79} }, // 't'
    { {         0}, {  0} },       
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        40}, { 80} }, // '('
    { {       104}, { 81} }, // 'h'
    { {         0}, {  0} },       
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 82} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 83} }, // '('
    { {         0}, {  0} },       
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       115}, { 84} }, // 's'
    { {         0}, {  0} },       
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       106}, { 85} }, // 'j'
    { {         0}, {  0} },       
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 86} }, // '('
    { {         0}, {  0} },       
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {       119}, { 87} }, // 'w'
    { {       116}, { 88} }, // 't'
    { {         0}, {  0} },       
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 89} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 90} }, // '('
    { {         0}, {  0} },       
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 91} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 92} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 93} }, // '('
    { {         0}, {  0} },       
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       110}, { 94} }, // 'n'
    { {         0}, {  0} },       
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       115}, { 95} }, // 's'
    { {         0}, {  0} },       
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       110}, { 96} }, // 'n'
    { {         0}, {  0} },       
};

SR__ s_78[] =
{
    { { REQ_DEF}, {  13} },       
    { {      94}, {  22} }, // '^'
    { {      43}, {  23} }, // '+'
    { {      45}, {  24} }, // '-'
    { {      42}, {  25} }, // '*'
    { {      47}, {  26} }, // '/'
    { {     124}, {  27} }, // '|'
    { {      77}, {  28} }, // 'M'
    { {     107}, {  29} }, // 'k'
    { {     109}, {  30} }, // 'm'
    { {     117}, {  31} }, // 'u'
    { {     110}, {  32} }, // 'n'
    { {     112}, {  33} }, // 'p'
    { {       0}, { -12} },       
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 97} }, // '('
    { {         0}, {  0} },       
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, { 19} },          
    { {       260}, { 98} }, // token 
    { {       257}, {  4} }, // NUMBER
    { {       106}, {  5} }, // 'j'   
    { {        45}, {  6} }, // '-'   
    { {        91}, {  7} }, // '['   
    { {        40}, {  8} }, // '('   
    { {       115}, {  9} }, // 's'   
    { {       108}, { 10} }, // 'l'   
    { {       109}, { 11} }, // 'm'   
    { {       112}, { 12} }, // 'p'   
    { {        99}, { 13} }, // 'c'   
    { {       102}, { 14} }, // 'f'   
    { {       100}, { 15} }, // 'd'   
    { {        76}, { 16} }, // 'L'   
    { {        88}, { 17} }, // 'X'   
    { {       116}, { 18} }, // 't'   
    { {        97}, { 19} }, // 'a'   
    { {       101}, { 20} }, // 'e'   
    { {         0}, {  0} },          
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 99} }, // '('
    { {         0}, {  0} },       
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 100} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 101} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       101}, { 102} }, // 'e'
    { {         0}, {   0} },       
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 103} }, // '('
    { {         0}, {   0} },       
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 104} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 105} }, // '('
    { {         0}, {   0} },       
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 106} }, // '('
    { {         0}, {   0} },       
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        44}, { 107} }, // ','
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 108} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        44}, { 109} }, // ','
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        44}, { 110} }, // ','
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 111} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 112} }, // '('
    { {         0}, {   0} },       
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 113} }, // '('
    { {         0}, {   0} },       
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 114} }, // '('
    { {         0}, {   0} },       
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 115} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 116} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 117} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 118} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 119} }, // '('
    { {         0}, {   0} },       
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 120} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_104[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 121} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_105[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 122} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 123} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 124} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 125} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 126} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 127} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_111[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 128} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 129} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 130} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_114[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 131} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 132} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 133} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_119[] =
{
    { { REQ_TOKEN}, {  19} },          
    { {       260}, { 134} }, // token 
    { {       257}, {   4} }, // NUMBER
    { {       106}, {   5} }, // 'j'   
    { {        45}, {   6} }, // '-'   
    { {        91}, {   7} }, // '['   
    { {        40}, {   8} }, // '('   
    { {       115}, {   9} }, // 's'   
    { {       108}, {  10} }, // 'l'   
    { {       109}, {  11} }, // 'm'   
    { {       112}, {  12} }, // 'p'   
    { {        99}, {  13} }, // 'c'   
    { {       102}, {  14} }, // 'f'   
    { {       100}, {  15} }, // 'd'   
    { {        76}, {  16} }, // 'L'   
    { {        88}, {  17} }, // 'X'   
    { {       116}, {  18} }, // 't'   
    { {        97}, {  19} }, // 'a'   
    { {       101}, {  20} }, // 'e'   
    { {         0}, {   0} },          
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 135} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_122[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 136} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 137} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 138} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 139} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 140} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_129[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 141} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 142} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 143} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {  14} },       
    { {        41}, { 144} }, // ')'
    { {        94}, {  22} }, // '^'
    { {        43}, {  23} }, // '+'
    { {        45}, {  24} }, // '-'
    { {        42}, {  25} }, // '*'
    { {        47}, {  26} }, // '/'
    { {       124}, {  27} }, // '|'
    { {        77}, {  28} }, // 'M'
    { {       107}, {  29} }, // 'k'
    { {       109}, {  30} }, // 'm'
    { {       117}, {  31} }, // 'u'
    { {       110}, {  32} }, // 'n'
    { {       112}, {  33} }, // 'p'
    { {         0}, {   0} },       
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_136[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_137[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_140[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_142[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

// $insert defaultactionreturn
                            // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 3:
#line 22 "bisonparser.y"
        {
         if(std::imag(d_vsp__[0]) == 0)
         {
         *output_stream << std::real(d_vsp__[0]);
         }
         else
         {
         *output_stream << d_vsp__[0];
         }
         }
        break;

        case 4:
#line 36 "bisonparser.y"
        {
         d_val__ = {std::stof(scanner.matched()),0};
         }
        break;

        case 5:
#line 41 "bisonparser.y"
        {
         d_val__ = {0,std::real(d_vsp__[0])};
         }
        break;

        case 6:
#line 46 "bisonparser.y"
        {
         d_val__ = pow( d_vsp__[-2] , d_vsp__[0] );
         }
        break;

        case 7:
#line 51 "bisonparser.y"
        {
         d_val__ = -1.0*d_vsp__[0];
         }
        break;

        case 8:
#line 56 "bisonparser.y"
        {
         d_val__ = d_vsp__[-2] + d_vsp__[0];
         }
        break;

        case 9:
#line 61 "bisonparser.y"
        {
         d_val__ = d_vsp__[-2] - d_vsp__[0];
         }
        break;

        case 10:
#line 66 "bisonparser.y"
        {
         d_val__ = d_vsp__[-2] * d_vsp__[0];
         }
        break;

        case 11:
#line 71 "bisonparser.y"
        {
         d_val__ = d_vsp__[-2] / d_vsp__[0];
         }
        break;

        case 12:
#line 76 "bisonparser.y"
        {
         d_val__ = d_vsp__[-3]*d_vsp__[0]/(d_vsp__[-3]+d_vsp__[0]);
         }
        break;

        case 13:
#line 81 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1];
         }
        break;

        case 14:
#line 86 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1];
         }
        break;

        case 15:
#line 91 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(6);
         }
        break;

        case 16:
#line 96 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(3);
         }
        break;

        case 17:
#line 101 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(-3);
         }
        break;

        case 18:
#line 106 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(-6);
         }
        break;

        case 19:
#line 111 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(-9);
         }
        break;

        case 20:
#line 116 "bisonparser.y"
        {
         d_val__ = d_vsp__[-1]*pow10(-12);
         }
        break;

        case 21:
#line 121 "bisonparser.y"
        {
         d_val__ = sqrt(d_vsp__[-1]);
         }
        break;

        case 22:
#line 126 "bisonparser.y"
        {
         d_val__ = log(d_vsp__[-1]);
         }
        break;

        case 23:
#line 131 "bisonparser.y"
        {
         d_val__ = std::norm(d_vsp__[-1]);
         }
        break;

        case 24:
#line 136 "bisonparser.y"
        {
         d_val__ = std::arg(d_vsp__[-1]);
         }
        break;

        case 25:
#line 141 "bisonparser.y"
        {
         d_val__ = std::conj(d_vsp__[-1]);
         }
        break;

        case 26:
#line 146 "bisonparser.y"
        {
         d_val__ = {std::real(d_vsp__[-1])*2*3.1415926,0};
         }
        break;

        case 27:
#line 151 "bisonparser.y"
        {
         d_val__ = {1/std::real(d_vsp__[-1]),0};
         }
        break;

        case 28:
#line 156 "bisonparser.y"
        {
         d_val__ = {std::real(d_vsp__[-1])*180/3.1415926,0};
         }
        break;

        case 29:
#line 161 "bisonparser.y"
        {
         d_val__ = {1.0/(2*3.1415926*std::real(d_vsp__[-3])*std::real(d_vsp__[-1])),0};
         }
        break;

        case 30:
#line 166 "bisonparser.y"
        {
         d_val__ = {1/(2*3.1415926*sqrt(std::real(d_vsp__[-3])*std::real(d_vsp__[-1]))),0};
         }
        break;

        case 31:
#line 171 "bisonparser.y"
        {
         double omegaf = -1/(2*3.1415926);
         d_val__ = {0,omegaf/(std::real(d_vsp__[-1])*std::real(d_vsp__[-3]))};
         }
        break;

        case 32:
#line 177 "bisonparser.y"
        {
         d_val__ = sin(d_vsp__[-1]);
         }
        break;

        case 33:
#line 182 "bisonparser.y"
        {
         d_val__ = cos(d_vsp__[-1]);
         }
        break;

        case 34:
#line 187 "bisonparser.y"
        {
         d_val__ = tan(d_vsp__[-1]);
         }
        break;

        case 35:
#line 192 "bisonparser.y"
        {
         d_val__ = asin(d_vsp__[-1]);
         }
        break;

        case 36:
#line 197 "bisonparser.y"
        {
         d_val__ = acos(d_vsp__[-1]);
         }
        break;

        case 37:
#line 202 "bisonparser.y"
        {
         d_val__ = atan(d_vsp__[-1]);
         }
        break;

        case 38:
#line 207 "bisonparser.y"
        {
         d_val__ = sinh(d_vsp__[-1]);
         }
        break;

        case 39:
#line 212 "bisonparser.y"
        {
         d_val__ = {2.7182818284,0};
         }
        break;

        case 40:
#line 217 "bisonparser.y"
        {
         d_val__ = {3.1415926535,0};
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



